import datetime as dt

import pytest

from scheduler.job import Job, JobType
from scheduler.util import Weekday


from helpers import (
    T_2021_5_26__3_55,
    T_2021_5_26__3_55_UTC,
    utc,
    foo,
    bar,
    samples_minutes,
    samples_hours,
    samples_hours_utc,
    samples_days,
    samples_days_utc,
)


@pytest.mark.parametrize(
    "patch_datetime_now, job_type, timing, handle, params, max_attempts, weight, delay, start, stop, skip_missing, tzinfo, res",
    [
        (
            samples_hours[0:1],
            JobType.CYCLIC,
            dt.timedelta(hours=1),
            foo,
            None,
            1,
            1,
            True,
            T_2021_5_26__3_55,
            None,
            True,
            None,
            "ONCE, foo(), at=2021-05-26 04:55:00, tz=None, in=1:00:00, #0/1, w=1.000",
        ),
        (
            samples_hours_utc[0:1],
            JobType.CYCLIC,
            dt.timedelta(hours=1),
            foo,
            None,
            0,
            1 / 3,
            False,
            T_2021_5_26__3_55_UTC - dt.timedelta(microseconds=10),
            None,
            True,
            utc,
            "CYCLIC, foo(), at=2021-05-26 03:54:59, tz=UTC, in=-0:00:00, #0/inf, w=0.333",
        ),
        (
            samples_minutes[2:3],
            JobType.MINUTELY,
            dt.time(second=20),
            bar,
            {"msg": "foobar"},
            20,
            0,
            True,
            T_2021_5_26__3_55,
            T_2021_5_26__3_55 + dt.timedelta(minutes=10),
            False,
            None,
            "MINUTELY, bar(..), at=2021-05-26 03:55:20, tz=None, in=-0:00:45, #0/20, w=0.000",
        ),
        (
            samples_hours_utc[0:1],
            JobType.HOURLY,
            dt.time(hour=7, minute=5, tzinfo=utc),
            print,
            None,
            0,
            20,
            False,
            T_2021_5_26__3_55_UTC,
            T_2021_5_26__3_55_UTC + dt.timedelta(hours=20),
            False,
            utc,
            "HOURLY, print(?), at=2021-05-26 03:55:00, tz=UTC, in=0:00:00, #0/inf, w=20.000",
        ),
        (
            samples_days[0:1],
            JobType.DAILY,
            dt.time(hour=7, minute=5),
            foo,
            None,
            7,
            1,
            True,
            T_2021_5_26__3_55,
            None,
            True,
            None,
            "DAILY, foo(), at=2021-05-26 07:05:00, tz=None, in=3:10:00, #0/7, w=1.000",
        ),
        (
            samples_days_utc[2:3],
            JobType.WEEKLY,
            Weekday.MONDAY,
            bar,
            None,
            0,
            1,
            False,
            T_2021_5_26__3_55_UTC,
            None,
            True,
            utc,
            "WEEKLY, bar(..), at=2021-05-26 03:55:00, tz=UTC, in=-1 day, #0/inf, w=1.000",
        ),
        (
            samples_days_utc[2:3],
            JobType.WEEKLY,
            [Weekday.WEDNESDAY, (Weekday.TUESDAY, dt.time(1, 2, 3, tzinfo=utc))],
            print,
            {"end": "FOO\n"},
            1,
            1,
            True,
            T_2021_5_26__3_55_UTC,
            T_2021_5_26__3_55_UTC + dt.timedelta(days=60),
            False,
            utc,
            "ONCE, print(?), at=2021-06-01 01:02:03, tz=UTC, in=4 days, #0/1, w=1.000",
        ),
    ],
    indirect=["patch_datetime_now"],
)
def test_job_str(
    patch_datetime_now,
    job_type,
    timing,
    handle,
    params,
    max_attempts,
    weight,
    delay,
    start,
    stop,
    skip_missing,
    tzinfo,
    res,
):
    job = Job(
        job_type=job_type,
        timing=timing,
        handle=handle,
        params=params,
        max_attempts=max_attempts,
        weight=weight,
        delay=delay,
        start=start,
        stop=stop,
        skip_missing=skip_missing,
        tzinfo=tzinfo,
    )
    assert res == str(job)
